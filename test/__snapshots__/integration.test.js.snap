// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`template integration tests using the generator avro schemas should appear in a package based on their namespace, if any. 1`] = `
"package com.acme;

import com.fasterxml.jackson.annotation.JsonInclude;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class User {

	public User () {
	}

	public User (
		String displayName, 
		String email, 
		Integer age) {
		this.displayName = displayName;
		this.email = email;
		this.age = age;
	}

	private String displayName;
	private String email;
	private Integer age;
	public String getDisplayName() {
		return displayName;
	}

	public User setDisplayName(String displayName) {
		this.displayName = displayName;
		return this;
	}


	public String getEmail() {
		return email;
	}

	public User setEmail(String email) {
		this.email = email;
		return this;
	}


	public Integer getAge() {
		return age;
	}

	public User setAge(Integer age) {
		this.age = age;
		return this;
	}

	public String toString() {
		return \\"User [\\"
		+ \\" displayName: \\" + displayName
		+ \\" email: \\" + email
		+ \\" age: \\" + age
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator avro schemas should appear in a package based on their namespace, if any. 2`] = `
"package com.acme;

import com.fasterxml.jackson.annotation.JsonInclude;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class User {

	public User () {
	}

	public User (
		String displayName, 
		String email, 
		Integer age) {
		this.displayName = displayName;
		this.email = email;
		this.age = age;
	}

	private String displayName;
	private String email;
	private Integer age;
	public String getDisplayName() {
		return displayName;
	}

	public User setDisplayName(String displayName) {
		this.displayName = displayName;
		return this;
	}


	public String getEmail() {
		return email;
	}

	public User setEmail(String email) {
		this.email = email;
		return this;
	}


	public Integer getAge() {
		return age;
	}

	public User setAge(Integer age) {
		this.age = age;
		return this;
	}

	public String toString() {
		return \\"User [\\"
		+ \\" displayName: \\" + displayName
		+ \\" email: \\" + email
		+ \\" age: \\" + age
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should generate a class for a schema property that is an array of objects 1`] = `
"


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.stream.function.StreamBridge;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.MessageBuilder;

@SpringBootApplication
public class Application {

	private static final Logger logger = LoggerFactory.getLogger(Application.class);

	@Autowired
	private StreamBridge streamBridge;

	public static void main(String[] args) {
		SpringApplication.run(Application.class);
	}


	public void sendAcmeRideshareBillingReceiptCreated001RegionChargifyRideId(
		RideReceipt payload, String region, String rideId
		) {
		String topic = String.format(\\"acme/rideshare/billing/receipt/created/0.0.1/%s/chargify/%s\\",
			region, rideId);
		streamBridge.send(topic, payload);
	}
}
"
`;

exports[`template integration tests using the generator should generate a class for a schema property that is an array of objects 2`] = `
"

import com.fasterxml.jackson.annotation.JsonInclude;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class ChargeAdjustments {

	public ChargeAdjustments () {
	}

	public ChargeAdjustments (
		String amount, 
		String name, 
		String type) {
		this.amount = amount;
		this.name = name;
		this.type = type;
	}

	private String amount;
	private String name;
	private String type;
	public String getAmount() {
		return amount;
	}

	public ChargeAdjustments setAmount(String amount) {
		this.amount = amount;
		return this;
	}


	public String getName() {
		return name;
	}

	public ChargeAdjustments setName(String name) {
		this.name = name;
		return this;
	}


	public String getType() {
		return type;
	}

	public ChargeAdjustments setType(String type) {
		this.type = type;
		return this;
	}

	public String toString() {
		return \\"ChargeAdjustments [\\"
		+ \\" amount: \\" + amount
		+ \\" name: \\" + name
		+ \\" type: \\" + type
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should generate a class for a schema property that is an array of objects 3`] = `
"

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class RideReceipt {

	public RideReceipt () {
	}

	public RideReceipt (
		String totalOwed, 
		String duration, 
		TestObject testObject, 
		ChargeAdjustments[] chargeAdjustments, 
		String currencyCode) {
		this.totalOwed = totalOwed;
		this.duration = duration;
		this.testObject = testObject;
		this.chargeAdjustments = chargeAdjustments;
		this.currencyCode = currencyCode;
	}

	@JsonProperty(\\"total_owed\\")
	private String totalOwed;
	private String duration;
	@JsonProperty(\\"test_object\\")
	private TestObject testObject;
	@JsonProperty(\\"charge_adjustments\\")
	private ChargeAdjustments[] chargeAdjustments;
	@JsonProperty(\\"currency_code\\")
	private String currencyCode;
	public String getTotalOwed() {
		return totalOwed;
	}

	public RideReceipt setTotalOwed(String totalOwed) {
		this.totalOwed = totalOwed;
		return this;
	}


	public String getDuration() {
		return duration;
	}

	public RideReceipt setDuration(String duration) {
		this.duration = duration;
		return this;
	}


	public TestObject getTestObject() {
		return testObject;
	}

	public RideReceipt setTestObject(TestObject testObject) {
		this.testObject = testObject;
		return this;
	}



	@JsonInclude(JsonInclude.Include.NON_NULL)
	public static class TestObject {

		public TestObject () {
		}

		public TestObject (
			String field1) {
			this.field1 = field1;
		}

		private String field1;
		public String getField1() {
			return field1;
		}

		public TestObject setField1(String field1) {
			this.field1 = field1;
			return this;
		}

		public String toString() {
			return \\"TestObject [\\"
			+ \\" field1: \\" + field1
			+ \\" ]\\";
		}
	}

	public ChargeAdjustments[] getChargeAdjustments() {
		return chargeAdjustments;
	}

	public RideReceipt setChargeAdjustments(ChargeAdjustments[] chargeAdjustments) {
		this.chargeAdjustments = chargeAdjustments;
		return this;
	}



	@JsonInclude(JsonInclude.Include.NON_NULL)
	public static class ChargeAdjustments {

		public ChargeAdjustments () {
		}
		public ChargeAdjustments (
			String amount, 
			String name, 
			String type) {
			this.amount = amount;
			this.name = name;
			this.type = type;
		}


		private String amount;
		private String name;
		private String type;
		public String getAmount() {
			return amount;
		}

		public ChargeAdjustments setAmount(String amount) {
			this.amount = amount;
			return this;
		}


		public String getName() {
			return name;
		}

		public ChargeAdjustments setName(String name) {
			this.name = name;
			return this;
		}


		public String getType() {
			return type;
		}

		public ChargeAdjustments setType(String type) {
			this.type = type;
			return this;
		}

		public String toString() {
			return \\"ChargeAdjustments [\\"
			+ \\" amount: \\" + amount
			+ \\" name: \\" + name
			+ \\" type: \\" + type
			+ \\" ]\\";
		}
	}

	public String getCurrencyCode() {
		return currencyCode;
	}

	public RideReceipt setCurrencyCode(String currencyCode) {
		this.currencyCode = currencyCode;
		return this;
	}

	public String toString() {
		return \\"RideReceipt [\\"
		+ \\" totalOwed: \\" + totalOwed
		+ \\" duration: \\" + duration
		+ \\" testObject: \\" + testObject
		+ \\" chargeAdjustments: \\" + chargeAdjustments
		+ \\" currencyCode: \\" + currencyCode
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should generate a class for a schema property that is an array of objects 4`] = `
"

import com.fasterxml.jackson.annotation.JsonInclude;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class TestObject {

	public TestObject () {
	}

	public TestObject (
		String field1) {
		this.field1 = field1;
	}

	private String field1;
	public String getField1() {
		return field1;
	}

	public TestObject setField1(String field1) {
		this.field1 = field1;
		return this;
	}

	public String toString() {
		return \\"TestObject [\\"
		+ \\" field1: \\" + field1
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should generate a comment for a consumer receiving multiple messages 1`] = `
"

import java.util.function.Consumer;
import java.util.function.Supplier;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.messaging.Message;

@SpringBootApplication
public class Application {

	private static final Logger logger = LoggerFactory.getLogger(Application.class);

	public static void main(String[] args) {
		SpringApplication.run(Application.class);
	}

	// The message can be of type:
	// Cat
	// Dog
	@Bean
	public Supplier<Message<?>> animalsSupplier() {
		return () -> {
			// Add business logic here.
			return new Message<?>();
		};
	}

	// The message can be of type:
	// Cat
	// Dog
	@Bean
	public Consumer<Message<?>> animalsConsumer() {
		return data -> {
			// Add business logic here.	
			logger.info(data.toString());
		};
	}

}
"
`;

exports[`template integration tests using the generator should generate a consumer and return a payload when using x-scs-function-name and dynamic topic binding 1`] = `
"

import java.util.function.Consumer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.stream.function.StreamBridge;
import org.springframework.context.annotation.Bean;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.MessageBuilder;

@SpringBootApplication
public class Application {

	private static final Logger logger = LoggerFactory.getLogger(Application.class);

	@Autowired
	private StreamBridge streamBridge;

	public static void main(String[] args) {
		SpringApplication.run(Application.class);
	}

	// This is a consumer that calls a send method, instead of a function, because it has a dynamic channel and we need streamBridge.
	@Bean
	public Consumer<MySchema> sameFunctionName() {
		return data -> {
			// Add business logic here.
			logger.info(data.toString());
			String messageId = \\"string\\";
			String operation = \\"string\\";
			MyOtherSchema payload = new MyOtherSchema();
			sendSameFunctionName(payload, messageId, operation);
		};
	}

	public void sendSameFunctionName(
		MyOtherSchema payload, String messageId, String operation
		) {
		String topic = String.format(\\"testLevel1/%s/%s\\",
			messageId, operation);
		streamBridge.send(topic, payload);
	}
}
"
`;

exports[`template integration tests using the generator should generate a function and return a payload when using x-scs-function-name and a static topic 1`] = `
"

import java.util.function.Function;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.messaging.Message;

@SpringBootApplication
public class Application {

	private static final Logger logger = LoggerFactory.getLogger(Application.class);

	public static void main(String[] args) {
		SpringApplication.run(Application.class);
	}

	@Bean
	public Function<Message<?>, Message<?>> sameFunctionName() {
		return data -> {
			// Add business logic here.
			logger.info(data.toString());
			return new Message<?>();
		};
	}

}
"
`;

exports[`template integration tests using the generator should generate a model subclass when it sees an allOf 1`] = `
"package com.acme;

import com.fasterxml.jackson.annotation.JsonInclude;






@JsonInclude(JsonInclude.Include.NON_NULL)
public class ExtendedErrorModel extends ErrorModel {

	public ExtendedErrorModel () {
	}

	public ExtendedErrorModel (
		String rootCause) {
		this.rootCause = rootCause;
	}

	private String rootCause;
	public String getRootCause() {
		return rootCause;
	}

	public ExtendedErrorModel setRootCause(String rootCause) {
		this.rootCause = rootCause;
		return this;
	}

	public String toString() {
		return \\"ExtendedErrorModel [\\"
		+ \\" rootCause: \\" + rootCause
		+ \\" super: \\" + super.toString()
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should generate application files using the solace binder 1`] = `
"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<project xmlns=\\"http://maven.apache.org/POM/4.0.0\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\" xsi:schemaLocation=\\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\\">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.company</groupId>
    <artifactId>asyncApiFileName</artifactId>
    <version>0.0.1</version>
    <packaging>jar</packaging>
    <name>asyncApiFileName</name>
    <description>Auto-generated Spring Cloud Stream AsyncAPI application</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.4.7</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <spring-cloud.version>2020.0.3</spring-cloud.version>
        <solace-spring-cloud-bom.version>2.1.0</solace-spring-cloud-bom.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>\${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>com.solace.spring.cloud</groupId>
                <artifactId>solace-spring-cloud-bom</artifactId>
                <version>\${solace-spring-cloud-bom.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>com.solace.spring.cloud</groupId>
            <artifactId>spring-cloud-starter-stream-solace</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>
"
`;

exports[`template integration tests using the generator should generate application files using the solace binder 2`] = `
"# solace-test-app

## Version 0.0.1



"
`;

exports[`template integration tests using the generator should generate application files using the solace binder 3`] = `
"package com.acme;

import java.util.function.Consumer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.stream.function.StreamBridge;
import org.springframework.context.annotation.Bean;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.MessageBuilder;

@SpringBootApplication
public class Application {

	private static final Logger logger = LoggerFactory.getLogger(Application.class);

	@Autowired
	private StreamBridge streamBridge;

	public static void main(String[] args) {
		SpringApplication.run(Application.class);
	}


	@Bean
	public Consumer<MySchema> testLevel1MessageIdOperationConsumer() {
		return data -> {
			// Add business logic here.	
			logger.info(data.toString());
		};
	}

	public void sendTestLevel1MessageIdOperation(
		MySchema payload, String messageId, String operation
		) {
		String topic = String.format(\\"testLevel1/%s/%s\\",
			messageId, operation);
		streamBridge.send(topic, payload);
	}
}
"
`;

exports[`template integration tests using the generator should generate application files using the solace binder 4`] = `
"package com.acme;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class MySchema {

	public MySchema () {
	}

	public MySchema (
		String prop1, 
		String _long) {
		this.prop1 = prop1;
		this._long = _long;
	}

	private String prop1;
	@JsonProperty(\\"long\\")
	private String _long;
	public String getProp1() {
		return prop1;
	}

	public MySchema setProp1(String prop1) {
		this.prop1 = prop1;
		return this;
	}


	public String getLong() {
		return _long;
	}

	public MySchema setLong(String _long) {
		this._long = _long;
		return this;
	}

	public String toString() {
		return \\"MySchema [\\"
		+ \\" prop1: \\" + prop1
		+ \\" _long: \\" + _long
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should generate application files using the solace binder 5`] = `
"spring:
  cloud:
    function:
      definition: testLevel1MessageIdOperationConsumer
    stream:
      bindings:
        testLevel1MessageIdOperationConsumer-in-0:
          destination: testLevel1/*/*
      binders:
        solace-binder:
          type: solace
          environment:
            solace:
              java:
                host: testVmrUri
                msgVpn: vpnName
                clientUsername: user
                clientPassword: test
logging:
  level:
    root: info
    org:
      springframework: info

"
`;

exports[`template integration tests using the generator should generate code from the smarty lighting streetlights example 1`] = `
"

import java.util.function.Consumer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.stream.function.StreamBridge;
import org.springframework.context.annotation.Bean;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.MessageBuilder;

@SpringBootApplication
public class Application {

	private static final Logger logger = LoggerFactory.getLogger(Application.class);

	@Autowired
	private StreamBridge streamBridge;

	public static void main(String[] args) {
		SpringApplication.run(Application.class);
	}

	@Bean
	public Consumer<LightMeasuredPayload> receiveLightMeasurement() {
		return data -> {
			// Add business logic here.	
			logger.info(data.toString());
		};
	}




	public void sendTurnOn(
		TurnOnOffPayload payload, String streetlightId
		) {
		String topic = String.format(\\"smartylighting/streetlights/1/0/action/%s/turn/on\\",
			streetlightId);
		streamBridge.send(topic, payload);
	}
	public void sendTurnOff(
		TurnOnOffPayload payload, String streetlightId
		) {
		String topic = String.format(\\"smartylighting/streetlights/1/0/action/%s/turn/off\\",
			streetlightId);
		streamBridge.send(topic, payload);
	}
	public void sendDimLight(
		DimLightPayload payload, String streetlightId
		) {
		String topic = String.format(\\"smartylighting/streetlights/1/0/action/%s/dim\\",
			streetlightId);
		streamBridge.send(topic, payload);
	}
}
"
`;

exports[`template integration tests using the generator should generate code from the smarty lighting streetlights example 2`] = `
"

import com.fasterxml.jackson.annotation.JsonInclude;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class DimLightPayload {

	public DimLightPayload () {
	}

	public DimLightPayload (
		Integer percentage, 
		SentAt sentAt) {
		this.percentage = percentage;
		this.sentAt = sentAt;
	}

	private Integer percentage;
	private SentAt sentAt;
	public Integer getPercentage() {
		return percentage;
	}

	public DimLightPayload setPercentage(Integer percentage) {
		this.percentage = percentage;
		return this;
	}


	public SentAt getSentAt() {
		return sentAt;
	}

	public DimLightPayload setSentAt(SentAt sentAt) {
		this.sentAt = sentAt;
		return this;
	}

	public String toString() {
		return \\"DimLightPayload [\\"
		+ \\" percentage: \\" + percentage
		+ \\" sentAt: \\" + sentAt
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should generate code from the smarty lighting streetlights example 3`] = `
"

import com.fasterxml.jackson.annotation.JsonInclude;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class LightMeasuredPayload {

	public LightMeasuredPayload () {
	}

	public LightMeasuredPayload (
		Integer lumens, 
		SentAt sentAt) {
		this.lumens = lumens;
		this.sentAt = sentAt;
	}

	private Integer lumens;
	private SentAt sentAt;
	public Integer getLumens() {
		return lumens;
	}

	public LightMeasuredPayload setLumens(Integer lumens) {
		this.lumens = lumens;
		return this;
	}


	public SentAt getSentAt() {
		return sentAt;
	}

	public LightMeasuredPayload setSentAt(SentAt sentAt) {
		this.sentAt = sentAt;
		return this;
	}

	public String toString() {
		return \\"LightMeasuredPayload [\\"
		+ \\" lumens: \\" + lumens
		+ \\" sentAt: \\" + sentAt
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should generate code from the smarty lighting streetlights example 4`] = `
"

import com.fasterxml.jackson.annotation.JsonInclude;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class SentAt {

	public SentAt () {
	}

	public SentAt (
		SubObject propertySubobject) {
		this.propertySubobject = propertySubobject;
	}

	private SubObject propertySubobject;
	public SubObject getPropertySubobject() {
		return propertySubobject;
	}

	public SentAt setPropertySubobject(SubObject propertySubobject) {
		this.propertySubobject = propertySubobject;
		return this;
	}

	public String toString() {
		return \\"SentAt [\\"
		+ \\" propertySubobject: \\" + propertySubobject
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should generate code from the smarty lighting streetlights example 5`] = `
"

import com.fasterxml.jackson.annotation.JsonInclude;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class TurnOnOffPayload {

	public TurnOnOffPayload () {
	}

	public TurnOnOffPayload (
		Command command, 
		SentAt sentAt) {
		this.command = command;
		this.sentAt = sentAt;
	}

	private Command command;
	private SentAt sentAt;
	public Command getCommand() {
		return command;
	}

	public TurnOnOffPayload setCommand(Command command) {
		this.command = command;
		return this;
	}


	public static enum Command { on,off }
	public SentAt getSentAt() {
		return sentAt;
	}

	public TurnOnOffPayload setSentAt(SentAt sentAt) {
		this.sentAt = sentAt;
		return this;
	}

	public String toString() {
		return \\"TurnOnOffPayload [\\"
		+ \\" command: \\" + command
		+ \\" sentAt: \\" + sentAt
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should generate code from the smarty lighting streetlights example 6`] = `
"

import com.fasterxml.jackson.annotation.JsonInclude;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class SubObject {

	public SubObject () {
	}

	public SubObject (
		String propertyA) {
		this.propertyA = propertyA;
	}

	private String propertyA;
	public String getPropertyA() {
		return propertyA;
	}

	public SubObject setPropertyA(String propertyA) {
		this.propertyA = propertyA;
		return this;
	}

	public String toString() {
		return \\"SubObject [\\"
		+ \\" propertyA: \\" + propertyA
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should generate extra config when using the paramatersToHeaders parameter 1`] = `
"package com.acme;

import java.util.function.Consumer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.stream.function.StreamBridge;
import org.springframework.context.annotation.Bean;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.MessageBuilder;

@SpringBootApplication
public class Application {

	private static final Logger logger = LoggerFactory.getLogger(Application.class);

	@Autowired
	private StreamBridge streamBridge;

	public static void main(String[] args) {
		SpringApplication.run(Application.class);
	}


	@Bean
	public Consumer<Message<MySchema>> testLevel1MessageIdOperationConsumer() {
		return data -> {
			// Add business logic here.	
			logger.info(data.toString());
		};
	}

	public void sendTestLevel1MessageIdOperation(
		MySchema payload, String messageId, String operation
		) {
		String topic = String.format(\\"testLevel1/%s/%s\\",
			messageId, operation);
		streamBridge.send(topic, payload);
	}
}
"
`;

exports[`template integration tests using the generator should generate extra config when using the paramatersToHeaders parameter 2`] = `
"spring:
  cloud:
    function:
      configuration:
        testLevel1MessageIdOperationConsumer:
          input-header-mapping-expression:
            messageId: 'headers.solace_destination.getName.split(\\"/\\")[1]'
            operation: 'headers.solace_destination.getName.split(\\"/\\")[2]'
      definition: testLevel1MessageIdOperationConsumer
    stream:
      bindings:
        testLevel1MessageIdOperationConsumer-in-0:
          destination: testLevel1/*/*
      binders:
        solace-binder:
          type: solace
          environment:
            solace:
              java:
                host: testVmrUri
                msgVpn: vpnName
                clientUsername: user
                clientPassword: test
logging:
  level:
    root: info
    org:
      springframework: info

"
`;

exports[`template integration tests using the generator should generate one class for a schema with multiple references to it in the asyncapi document 1`] = `
"

import java.util.function.Consumer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.stream.function.StreamBridge;
import org.springframework.context.annotation.Bean;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.MessageBuilder;

@SpringBootApplication
public class Application {

	private static final Logger logger = LoggerFactory.getLogger(Application.class);

	@Autowired
	private StreamBridge streamBridge;

	public static void main(String[] args) {
		SpringApplication.run(Application.class);
	}


	@Bean
	public Consumer<RideUpdated1> taxinycOpsRideUpdatedV1RideStatusDriverIdPassengerIdConsumer() {
		return data -> {
			// Add business logic here.	
			logger.info(data.toString());
		};
	}

	public void sendTaxinycBackofficePaymentChargedV1PaymentStatusDriverIdPassengerId(
		PaymentCharged payload, String paymentStatus, String driverId, String passengerId
		) {
		String topic = String.format(\\"taxinyc/backoffice/payment/charged/v1/%s/%s/%s\\",
			paymentStatus, driverId, passengerId);
		streamBridge.send(topic, payload);
	}
}
"
`;

exports[`template integration tests using the generator should generate one class for a schema with multiple references to it in the asyncapi document 2`] = `
"

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class Driver {

	public Driver () {
	}

	public Driver (
		Integer driverId, 
		java.math.BigDecimal rating, 
		String lastName, 
		String carClass, 
		String firstName) {
		this.driverId = driverId;
		this.rating = rating;
		this.lastName = lastName;
		this.carClass = carClass;
		this.firstName = firstName;
	}

	@JsonProperty(\\"driver_id\\")
	private Integer driverId;
	private java.math.BigDecimal rating;
	@JsonProperty(\\"last_name\\")
	private String lastName;
	@JsonProperty(\\"car_class\\")
	private String carClass;
	@JsonProperty(\\"first_name\\")
	private String firstName;
	public Integer getDriverId() {
		return driverId;
	}

	public Driver setDriverId(Integer driverId) {
		this.driverId = driverId;
		return this;
	}


	public java.math.BigDecimal getRating() {
		return rating;
	}

	public Driver setRating(java.math.BigDecimal rating) {
		this.rating = rating;
		return this;
	}


	public String getLastName() {
		return lastName;
	}

	public Driver setLastName(String lastName) {
		this.lastName = lastName;
		return this;
	}


	public String getCarClass() {
		return carClass;
	}

	public Driver setCarClass(String carClass) {
		this.carClass = carClass;
		return this;
	}


	public String getFirstName() {
		return firstName;
	}

	public Driver setFirstName(String firstName) {
		this.firstName = firstName;
		return this;
	}

	public String toString() {
		return \\"Driver [\\"
		+ \\" driverId: \\" + driverId
		+ \\" rating: \\" + rating
		+ \\" lastName: \\" + lastName
		+ \\" carClass: \\" + carClass
		+ \\" firstName: \\" + firstName
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should generate one class for a schema with multiple references to it in the asyncapi document 3`] = `
"

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class Passenger {

	public Passenger () {
	}

	public Passenger (
		Integer passengerId, 
		java.math.BigDecimal rating, 
		String lastName, 
		String firstName) {
		this.passengerId = passengerId;
		this.rating = rating;
		this.lastName = lastName;
		this.firstName = firstName;
	}

	@JsonProperty(\\"passenger_id\\")
	private Integer passengerId;
	private java.math.BigDecimal rating;
	@JsonProperty(\\"last_name\\")
	private String lastName;
	@JsonProperty(\\"first_name\\")
	private String firstName;
	public Integer getPassengerId() {
		return passengerId;
	}

	public Passenger setPassengerId(Integer passengerId) {
		this.passengerId = passengerId;
		return this;
	}


	public java.math.BigDecimal getRating() {
		return rating;
	}

	public Passenger setRating(java.math.BigDecimal rating) {
		this.rating = rating;
		return this;
	}


	public String getLastName() {
		return lastName;
	}

	public Passenger setLastName(String lastName) {
		this.lastName = lastName;
		return this;
	}


	public String getFirstName() {
		return firstName;
	}

	public Passenger setFirstName(String firstName) {
		this.firstName = firstName;
		return this;
	}

	public String toString() {
		return \\"Passenger [\\"
		+ \\" passengerId: \\" + passengerId
		+ \\" rating: \\" + rating
		+ \\" lastName: \\" + lastName
		+ \\" firstName: \\" + firstName
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should generate one class for a schema with multiple references to it in the asyncapi document 4`] = `
"

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class PaymentCharged {

	public PaymentCharged () {
	}

	public PaymentCharged (
		Integer rideId, 
		String entityType, 
		java.math.BigDecimal amountCharged, 
		Driver driver, 
		String paymentChargedId, 
		Passenger passenger, 
		String paymentStatus, 
		String invoiceSystemId, 
		String informationSource, 
		String timestamp) {
		this.rideId = rideId;
		this.entityType = entityType;
		this.amountCharged = amountCharged;
		this.driver = driver;
		this.paymentChargedId = paymentChargedId;
		this.passenger = passenger;
		this.paymentStatus = paymentStatus;
		this.invoiceSystemId = invoiceSystemId;
		this.informationSource = informationSource;
		this.timestamp = timestamp;
	}

	@JsonProperty(\\"ride_id\\")
	private Integer rideId;
	@JsonProperty(\\"entity_type\\")
	private String entityType;
	@JsonProperty(\\"amount_charged\\")
	private java.math.BigDecimal amountCharged;
	private Driver driver;
	@JsonProperty(\\"payment_charged_id\\")
	private String paymentChargedId;
	private Passenger passenger;
	@JsonProperty(\\"payment_status\\")
	private String paymentStatus;
	@JsonProperty(\\"invoice_system_id\\")
	private String invoiceSystemId;
	@JsonProperty(\\"information_source\\")
	private String informationSource;
	private String timestamp;
	public Integer getRideId() {
		return rideId;
	}

	public PaymentCharged setRideId(Integer rideId) {
		this.rideId = rideId;
		return this;
	}


	public String getEntityType() {
		return entityType;
	}

	public PaymentCharged setEntityType(String entityType) {
		this.entityType = entityType;
		return this;
	}


	public java.math.BigDecimal getAmountCharged() {
		return amountCharged;
	}

	public PaymentCharged setAmountCharged(java.math.BigDecimal amountCharged) {
		this.amountCharged = amountCharged;
		return this;
	}


	public Driver getDriver() {
		return driver;
	}

	public PaymentCharged setDriver(Driver driver) {
		this.driver = driver;
		return this;
	}



	@JsonInclude(JsonInclude.Include.NON_NULL)
	public static class Driver {

		public Driver () {
		}

		public Driver (
			Integer driverId, 
			Integer rating, 
			String lastName, 
			String carClass, 
			String firstName) {
			this.driverId = driverId;
			this.rating = rating;
			this.lastName = lastName;
			this.carClass = carClass;
			this.firstName = firstName;
		}

		@JsonProperty(\\"driver_id\\")
		private Integer driverId;
		private Integer rating;
		@JsonProperty(\\"last_name\\")
		private String lastName;
		@JsonProperty(\\"car_class\\")
		private String carClass;
		@JsonProperty(\\"first_name\\")
		private String firstName;
		public Integer getDriverId() {
			return driverId;
		}

		public Driver setDriverId(Integer driverId) {
			this.driverId = driverId;
			return this;
		}


		public Integer getRating() {
			return rating;
		}

		public Driver setRating(Integer rating) {
			this.rating = rating;
			return this;
		}


		public String getLastName() {
			return lastName;
		}

		public Driver setLastName(String lastName) {
			this.lastName = lastName;
			return this;
		}


		public String getCarClass() {
			return carClass;
		}

		public Driver setCarClass(String carClass) {
			this.carClass = carClass;
			return this;
		}


		public String getFirstName() {
			return firstName;
		}

		public Driver setFirstName(String firstName) {
			this.firstName = firstName;
			return this;
		}

		public String toString() {
			return \\"Driver [\\"
			+ \\" driverId: \\" + driverId
			+ \\" rating: \\" + rating
			+ \\" lastName: \\" + lastName
			+ \\" carClass: \\" + carClass
			+ \\" firstName: \\" + firstName
			+ \\" ]\\";
		}
	}

	public String getPaymentChargedId() {
		return paymentChargedId;
	}

	public PaymentCharged setPaymentChargedId(String paymentChargedId) {
		this.paymentChargedId = paymentChargedId;
		return this;
	}


	public Passenger getPassenger() {
		return passenger;
	}

	public PaymentCharged setPassenger(Passenger passenger) {
		this.passenger = passenger;
		return this;
	}



	@JsonInclude(JsonInclude.Include.NON_NULL)
	public static class Passenger {

		public Passenger () {
		}

		public Passenger (
			Integer passengerId, 
			Integer rating, 
			String lastName, 
			String firstName) {
			this.passengerId = passengerId;
			this.rating = rating;
			this.lastName = lastName;
			this.firstName = firstName;
		}

		@JsonProperty(\\"passenger_id\\")
		private Integer passengerId;
		private Integer rating;
		@JsonProperty(\\"last_name\\")
		private String lastName;
		@JsonProperty(\\"first_name\\")
		private String firstName;
		public Integer getPassengerId() {
			return passengerId;
		}

		public Passenger setPassengerId(Integer passengerId) {
			this.passengerId = passengerId;
			return this;
		}


		public Integer getRating() {
			return rating;
		}

		public Passenger setRating(Integer rating) {
			this.rating = rating;
			return this;
		}


		public String getLastName() {
			return lastName;
		}

		public Passenger setLastName(String lastName) {
			this.lastName = lastName;
			return this;
		}


		public String getFirstName() {
			return firstName;
		}

		public Passenger setFirstName(String firstName) {
			this.firstName = firstName;
			return this;
		}

		public String toString() {
			return \\"Passenger [\\"
			+ \\" passengerId: \\" + passengerId
			+ \\" rating: \\" + rating
			+ \\" lastName: \\" + lastName
			+ \\" firstName: \\" + firstName
			+ \\" ]\\";
		}
	}

	public String getPaymentStatus() {
		return paymentStatus;
	}

	public PaymentCharged setPaymentStatus(String paymentStatus) {
		this.paymentStatus = paymentStatus;
		return this;
	}


	public String getInvoiceSystemId() {
		return invoiceSystemId;
	}

	public PaymentCharged setInvoiceSystemId(String invoiceSystemId) {
		this.invoiceSystemId = invoiceSystemId;
		return this;
	}


	public String getInformationSource() {
		return informationSource;
	}

	public PaymentCharged setInformationSource(String informationSource) {
		this.informationSource = informationSource;
		return this;
	}


	public String getTimestamp() {
		return timestamp;
	}

	public PaymentCharged setTimestamp(String timestamp) {
		this.timestamp = timestamp;
		return this;
	}

	public String toString() {
		return \\"PaymentCharged [\\"
		+ \\" rideId: \\" + rideId
		+ \\" entityType: \\" + entityType
		+ \\" amountCharged: \\" + amountCharged
		+ \\" driver: \\" + driver
		+ \\" paymentChargedId: \\" + paymentChargedId
		+ \\" passenger: \\" + passenger
		+ \\" paymentStatus: \\" + paymentStatus
		+ \\" invoiceSystemId: \\" + invoiceSystemId
		+ \\" informationSource: \\" + informationSource
		+ \\" timestamp: \\" + timestamp
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should generate one class for a schema with multiple references to it in the asyncapi document 5`] = `
"

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class RideUpdated1 {

	public RideUpdated1 () {
	}

	public RideUpdated1 (
		String rideId, 
		Integer heading, 
		java.math.BigDecimal latitude, 
		Integer passengerCount, 
		Integer pointIdx, 
		String informationSource, 
		Integer speed, 
		Driver driver, 
		Passenger passenger, 
		java.math.BigDecimal meterIncrement, 
		java.math.BigDecimal longitude, 
		String timestamp, 
		java.math.BigDecimal meterReading, 
		RideStatus rideStatus) {
		this.rideId = rideId;
		this.heading = heading;
		this.latitude = latitude;
		this.passengerCount = passengerCount;
		this.pointIdx = pointIdx;
		this.informationSource = informationSource;
		this.speed = speed;
		this.driver = driver;
		this.passenger = passenger;
		this.meterIncrement = meterIncrement;
		this.longitude = longitude;
		this.timestamp = timestamp;
		this.meterReading = meterReading;
		this.rideStatus = rideStatus;
	}

	@JsonProperty(\\"ride_id\\")
	private String rideId;
	private Integer heading;
	private java.math.BigDecimal latitude;
	@JsonProperty(\\"passenger_count\\")
	private Integer passengerCount;
	@JsonProperty(\\"point_idx\\")
	private Integer pointIdx;
	@JsonProperty(\\"information_source\\")
	private String informationSource;
	private Integer speed;
	private Driver driver;
	private Passenger passenger;
	@JsonProperty(\\"meter_increment\\")
	private java.math.BigDecimal meterIncrement;
	private java.math.BigDecimal longitude;
	private String timestamp;
	@JsonProperty(\\"meter_reading\\")
	private java.math.BigDecimal meterReading;
	@JsonProperty(\\"ride_status\\")
	private RideStatus rideStatus;
	public String getRideId() {
		return rideId;
	}

	public RideUpdated1 setRideId(String rideId) {
		this.rideId = rideId;
		return this;
	}


	public Integer getHeading() {
		return heading;
	}

	public RideUpdated1 setHeading(Integer heading) {
		this.heading = heading;
		return this;
	}


	public java.math.BigDecimal getLatitude() {
		return latitude;
	}

	public RideUpdated1 setLatitude(java.math.BigDecimal latitude) {
		this.latitude = latitude;
		return this;
	}


	public Integer getPassengerCount() {
		return passengerCount;
	}

	public RideUpdated1 setPassengerCount(Integer passengerCount) {
		this.passengerCount = passengerCount;
		return this;
	}


	public Integer getPointIdx() {
		return pointIdx;
	}

	public RideUpdated1 setPointIdx(Integer pointIdx) {
		this.pointIdx = pointIdx;
		return this;
	}


	public String getInformationSource() {
		return informationSource;
	}

	public RideUpdated1 setInformationSource(String informationSource) {
		this.informationSource = informationSource;
		return this;
	}


	public Integer getSpeed() {
		return speed;
	}

	public RideUpdated1 setSpeed(Integer speed) {
		this.speed = speed;
		return this;
	}


	public Driver getDriver() {
		return driver;
	}

	public RideUpdated1 setDriver(Driver driver) {
		this.driver = driver;
		return this;
	}



	@JsonInclude(JsonInclude.Include.NON_NULL)
	public static class Driver {

		public Driver () {
		}

		public Driver (
			Integer driverId, 
			java.math.BigDecimal rating, 
			String lastName, 
			String carClass, 
			String firstName) {
			this.driverId = driverId;
			this.rating = rating;
			this.lastName = lastName;
			this.carClass = carClass;
			this.firstName = firstName;
		}

		@JsonProperty(\\"driver_id\\")
		private Integer driverId;
		private java.math.BigDecimal rating;
		@JsonProperty(\\"last_name\\")
		private String lastName;
		@JsonProperty(\\"car_class\\")
		private String carClass;
		@JsonProperty(\\"first_name\\")
		private String firstName;
		public Integer getDriverId() {
			return driverId;
		}

		public Driver setDriverId(Integer driverId) {
			this.driverId = driverId;
			return this;
		}


		public java.math.BigDecimal getRating() {
			return rating;
		}

		public Driver setRating(java.math.BigDecimal rating) {
			this.rating = rating;
			return this;
		}


		public String getLastName() {
			return lastName;
		}

		public Driver setLastName(String lastName) {
			this.lastName = lastName;
			return this;
		}


		public String getCarClass() {
			return carClass;
		}

		public Driver setCarClass(String carClass) {
			this.carClass = carClass;
			return this;
		}


		public String getFirstName() {
			return firstName;
		}

		public Driver setFirstName(String firstName) {
			this.firstName = firstName;
			return this;
		}

		public String toString() {
			return \\"Driver [\\"
			+ \\" driverId: \\" + driverId
			+ \\" rating: \\" + rating
			+ \\" lastName: \\" + lastName
			+ \\" carClass: \\" + carClass
			+ \\" firstName: \\" + firstName
			+ \\" ]\\";
		}
	}

	public Passenger getPassenger() {
		return passenger;
	}

	public RideUpdated1 setPassenger(Passenger passenger) {
		this.passenger = passenger;
		return this;
	}



	@JsonInclude(JsonInclude.Include.NON_NULL)
	public static class Passenger {

		public Passenger () {
		}

		public Passenger (
			Integer passengerId, 
			java.math.BigDecimal rating, 
			String lastName, 
			String firstName) {
			this.passengerId = passengerId;
			this.rating = rating;
			this.lastName = lastName;
			this.firstName = firstName;
		}

		@JsonProperty(\\"passenger_id\\")
		private Integer passengerId;
		private java.math.BigDecimal rating;
		@JsonProperty(\\"last_name\\")
		private String lastName;
		@JsonProperty(\\"first_name\\")
		private String firstName;
		public Integer getPassengerId() {
			return passengerId;
		}

		public Passenger setPassengerId(Integer passengerId) {
			this.passengerId = passengerId;
			return this;
		}


		public java.math.BigDecimal getRating() {
			return rating;
		}

		public Passenger setRating(java.math.BigDecimal rating) {
			this.rating = rating;
			return this;
		}


		public String getLastName() {
			return lastName;
		}

		public Passenger setLastName(String lastName) {
			this.lastName = lastName;
			return this;
		}


		public String getFirstName() {
			return firstName;
		}

		public Passenger setFirstName(String firstName) {
			this.firstName = firstName;
			return this;
		}

		public String toString() {
			return \\"Passenger [\\"
			+ \\" passengerId: \\" + passengerId
			+ \\" rating: \\" + rating
			+ \\" lastName: \\" + lastName
			+ \\" firstName: \\" + firstName
			+ \\" ]\\";
		}
	}

	public java.math.BigDecimal getMeterIncrement() {
		return meterIncrement;
	}

	public RideUpdated1 setMeterIncrement(java.math.BigDecimal meterIncrement) {
		this.meterIncrement = meterIncrement;
		return this;
	}


	public java.math.BigDecimal getLongitude() {
		return longitude;
	}

	public RideUpdated1 setLongitude(java.math.BigDecimal longitude) {
		this.longitude = longitude;
		return this;
	}


	public String getTimestamp() {
		return timestamp;
	}

	public RideUpdated1 setTimestamp(String timestamp) {
		this.timestamp = timestamp;
		return this;
	}


	public java.math.BigDecimal getMeterReading() {
		return meterReading;
	}

	public RideUpdated1 setMeterReading(java.math.BigDecimal meterReading) {
		this.meterReading = meterReading;
		return this;
	}


	public RideStatus getRideStatus() {
		return rideStatus;
	}

	public RideUpdated1 setRideStatus(RideStatus rideStatus) {
		this.rideStatus = rideStatus;
		return this;
	}


	public static enum RideStatus { accepted,pickup,enroute,dropoff }	public String toString() {
		return \\"RideUpdated1 [\\"
		+ \\" rideId: \\" + rideId
		+ \\" heading: \\" + heading
		+ \\" latitude: \\" + latitude
		+ \\" passengerCount: \\" + passengerCount
		+ \\" pointIdx: \\" + pointIdx
		+ \\" informationSource: \\" + informationSource
		+ \\" speed: \\" + speed
		+ \\" driver: \\" + driver
		+ \\" passenger: \\" + passenger
		+ \\" meterIncrement: \\" + meterIncrement
		+ \\" longitude: \\" + longitude
		+ \\" timestamp: \\" + timestamp
		+ \\" meterReading: \\" + meterReading
		+ \\" rideStatus: \\" + rideStatus
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should generate schemas with nested arrays 1`] = `
"

import java.util.function.Consumer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.stream.function.StreamBridge;
import org.springframework.context.annotation.Bean;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.MessageBuilder;

@SpringBootApplication
public class Application {

	private static final Logger logger = LoggerFactory.getLogger(Application.class);

	@Autowired
	private StreamBridge streamBridge;

	public static void main(String[] args) {
		SpringApplication.run(Application.class);
	}

	@Bean
	public Consumer<Dossier> companyCustomerCompanyDebtorDebtorIdDossierDossierIdCreatedConsumer() {
		return data -> {
			// Add business logic here.	
			logger.info(data.toString());
		};
	}

	@Bean
	public Consumer<Debtor> companyCustomerCompanyDebtorDebtorIdCreatedConsumer() {
		return data -> {
			// Add business logic here.	
			logger.info(data.toString());
		};
	}



	public void sendCompanyCustomerCompanyDebtorCreate(
		Debtor payload, String customerCompany
		) {
		String topic = String.format(\\"Company/%s/debtor/create\\",
			customerCompany);
		streamBridge.send(topic, payload);
	}
	public void sendCompanyCustomerCompanyDebtorDebtorIdDossierCreate(
		Dossier payload, String customerCompany, String debtorId
		) {
		String topic = String.format(\\"Company/%s/debtor/%s/Dossier/create\\",
			customerCompany, debtorId);
		streamBridge.send(topic, payload);
	}
}
"
`;

exports[`template integration tests using the generator should generate schemas with nested arrays 2`] = `
"

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class Dossier {

	public Dossier () {
	}

	public Dossier (
		java.math.BigDecimal premium, 
		java.math.BigDecimal appliedDiscount, 
		String productId, 
		Options[] options, 
		String id, 
		String clientId) {
		this.premium = premium;
		this.appliedDiscount = appliedDiscount;
		this.productId = productId;
		this.options = options;
		this.id = id;
		this.clientId = clientId;
	}

	private java.math.BigDecimal premium;
	@JsonProperty(\\"applied_discount\\")
	private java.math.BigDecimal appliedDiscount;
	@JsonProperty(\\"product_id\\")
	private String productId;
	private Options[] options;
	private String id;
	@JsonProperty(\\"client_id\\")
	private String clientId;
	public java.math.BigDecimal getPremium() {
		return premium;
	}

	public Dossier setPremium(java.math.BigDecimal premium) {
		this.premium = premium;
		return this;
	}


	public java.math.BigDecimal getAppliedDiscount() {
		return appliedDiscount;
	}

	public Dossier setAppliedDiscount(java.math.BigDecimal appliedDiscount) {
		this.appliedDiscount = appliedDiscount;
		return this;
	}


	public String getProductId() {
		return productId;
	}

	public Dossier setProductId(String productId) {
		this.productId = productId;
		return this;
	}


	public Options[] getOptions() {
		return options;
	}

	public Dossier setOptions(Options[] options) {
		this.options = options;
		return this;
	}



	@JsonInclude(JsonInclude.Include.NON_NULL)
	public static class Options {

		public Options () {
		}
		public Options (
			String name, 
			String id) {
			this.name = name;
			this.id = id;
		}


		private String name;
		private String id;
		public String getName() {
			return name;
		}

		public Options setName(String name) {
			this.name = name;
			return this;
		}


		public String getId() {
			return id;
		}

		public Options setId(String id) {
			this.id = id;
			return this;
		}

		public String toString() {
			return \\"Options [\\"
			+ \\" name: \\" + name
			+ \\" id: \\" + id
			+ \\" ]\\";
		}
	}

	public String getId() {
		return id;
	}

	public Dossier setId(String id) {
		this.id = id;
		return this;
	}


	public String getClientId() {
		return clientId;
	}

	public Dossier setClientId(String clientId) {
		this.clientId = clientId;
		return this;
	}

	public String toString() {
		return \\"Dossier [\\"
		+ \\" premium: \\" + premium
		+ \\" appliedDiscount: \\" + appliedDiscount
		+ \\" productId: \\" + productId
		+ \\" options: \\" + options
		+ \\" id: \\" + id
		+ \\" clientId: \\" + clientId
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should generate schemas with nested arrays 3`] = `
"

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class Debtor {

	public Debtor () {
	}

	public Debtor (
		Emails[] emails, 
		String birthdate, 
		Address address, 
		String lastName, 
		Phones[] phones, 
		String id, 
		String firstName, 
		BankAccount bankAccount) {
		this.emails = emails;
		this.birthdate = birthdate;
		this.address = address;
		this.lastName = lastName;
		this.phones = phones;
		this.id = id;
		this.firstName = firstName;
		this.bankAccount = bankAccount;
	}

	private Emails[] emails;
	private String birthdate;
	private Address address;
	@JsonProperty(\\"last_name\\")
	private String lastName;
	private Phones[] phones;
	private String id;
	@JsonProperty(\\"first_name\\")
	private String firstName;
	@JsonProperty(\\"bank_account\\")
	private BankAccount bankAccount;
	public Emails[] getEmails() {
		return emails;
	}

	public Debtor setEmails(Emails[] emails) {
		this.emails = emails;
		return this;
	}



	@JsonInclude(JsonInclude.Include.NON_NULL)
	public static class Emails {

		public Emails () {
		}
		public Emails (
			String type, 
			String email, 
			Boolean preferred) {
			this.type = type;
			this.email = email;
			this.preferred = preferred;
		}


		private String type;
		private String email;
		private Boolean preferred;
		public String getType() {
			return type;
		}

		public Emails setType(String type) {
			this.type = type;
			return this;
		}


		public String getEmail() {
			return email;
		}

		public Emails setEmail(String email) {
			this.email = email;
			return this;
		}


		public Boolean getPreferred() {
			return preferred;
		}

		public Emails setPreferred(Boolean preferred) {
			this.preferred = preferred;
			return this;
		}

		public String toString() {
			return \\"Emails [\\"
			+ \\" type: \\" + type
			+ \\" email: \\" + email
			+ \\" preferred: \\" + preferred
			+ \\" ]\\";
		}
	}

	public String getBirthdate() {
		return birthdate;
	}

	public Debtor setBirthdate(String birthdate) {
		this.birthdate = birthdate;
		return this;
	}


	public Address getAddress() {
		return address;
	}

	public Debtor setAddress(Address address) {
		this.address = address;
		return this;
	}



	@JsonInclude(JsonInclude.Include.NON_NULL)
	public static class Address {

		public Address () {
		}

		public Address (
			String countryCode, 
			String city, 
			String street, 
			String postalCode) {
			this.countryCode = countryCode;
			this.city = city;
			this.street = street;
			this.postalCode = postalCode;
		}

		@JsonProperty(\\"country_code\\")
		private String countryCode;
		private String city;
		private String street;
		@JsonProperty(\\"postal_code\\")
		private String postalCode;
		public String getCountryCode() {
			return countryCode;
		}

		public Address setCountryCode(String countryCode) {
			this.countryCode = countryCode;
			return this;
		}


		public String getCity() {
			return city;
		}

		public Address setCity(String city) {
			this.city = city;
			return this;
		}


		public String getStreet() {
			return street;
		}

		public Address setStreet(String street) {
			this.street = street;
			return this;
		}


		public String getPostalCode() {
			return postalCode;
		}

		public Address setPostalCode(String postalCode) {
			this.postalCode = postalCode;
			return this;
		}

		public String toString() {
			return \\"Address [\\"
			+ \\" countryCode: \\" + countryCode
			+ \\" city: \\" + city
			+ \\" street: \\" + street
			+ \\" postalCode: \\" + postalCode
			+ \\" ]\\";
		}
	}

	public String getLastName() {
		return lastName;
	}

	public Debtor setLastName(String lastName) {
		this.lastName = lastName;
		return this;
	}


	public Phones[] getPhones() {
		return phones;
	}

	public Debtor setPhones(Phones[] phones) {
		this.phones = phones;
		return this;
	}



	@JsonInclude(JsonInclude.Include.NON_NULL)
	public static class Phones {

		public Phones () {
		}
		public Phones (
			String phone, 
			String type, 
			Boolean preferred) {
			this.phone = phone;
			this.type = type;
			this.preferred = preferred;
		}


		private String phone;
		private String type;
		private Boolean preferred;
		public String getPhone() {
			return phone;
		}

		public Phones setPhone(String phone) {
			this.phone = phone;
			return this;
		}


		public String getType() {
			return type;
		}

		public Phones setType(String type) {
			this.type = type;
			return this;
		}


		public Boolean getPreferred() {
			return preferred;
		}

		public Phones setPreferred(Boolean preferred) {
			this.preferred = preferred;
			return this;
		}

		public String toString() {
			return \\"Phones [\\"
			+ \\" phone: \\" + phone
			+ \\" type: \\" + type
			+ \\" preferred: \\" + preferred
			+ \\" ]\\";
		}
	}

	public String getId() {
		return id;
	}

	public Debtor setId(String id) {
		this.id = id;
		return this;
	}


	public String getFirstName() {
		return firstName;
	}

	public Debtor setFirstName(String firstName) {
		this.firstName = firstName;
		return this;
	}


	public BankAccount getBankAccount() {
		return bankAccount;
	}

	public Debtor setBankAccount(BankAccount bankAccount) {
		this.bankAccount = bankAccount;
		return this;
	}



	@JsonInclude(JsonInclude.Include.NON_NULL)
	public static class BankAccount {

		public BankAccount () {
		}

		public BankAccount (
			String iban, 
			String bic) {
			this.iban = iban;
			this.bic = bic;
		}

		@JsonProperty(\\"IBAN\\")
		private String iban;
		@JsonProperty(\\"BIC\\")
		private String bic;
		public String getIban() {
			return iban;
		}

		public BankAccount setIban(String iban) {
			this.iban = iban;
			return this;
		}


		public String getBic() {
			return bic;
		}

		public BankAccount setBic(String bic) {
			this.bic = bic;
			return this;
		}

		public String toString() {
			return \\"BankAccount [\\"
			+ \\" iban: \\" + iban
			+ \\" bic: \\" + bic
			+ \\" ]\\";
		}
	}
	public String toString() {
		return \\"Debtor [\\"
		+ \\" emails: \\" + emails
		+ \\" birthdate: \\" + birthdate
		+ \\" address: \\" + address
		+ \\" lastName: \\" + lastName
		+ \\" phones: \\" + phones
		+ \\" id: \\" + id
		+ \\" firstName: \\" + firstName
		+ \\" bankAccount: \\" + bankAccount
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should not populate application yml with functions that are not beans 1`] = `
"spring:
  cloud:
    function:
      definition: ''
    stream:
      bindings: {}
logging:
  level:
    root: info
    org:
      springframework: info

"
`;

exports[`template integration tests using the generator should package and import schemas in another avro namespace 1`] = `
"

import java.util.function.Consumer;
import java.util.function.Supplier;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import com.example.api.jobOrder.JobOrder;
import com.example.api.jobAck.JobAcknowledge;

@SpringBootApplication
public class Application {

	private static final Logger logger = LoggerFactory.getLogger(Application.class);

	public static void main(String[] args) {
		SpringApplication.run(Application.class);
	}

	@Bean
	public Supplier<JobOrder> testJobsOrderSupplier() {
		return () -> {
			// Add business logic here.
			return new JobOrder();
		};
	}

	@Bean
	public Consumer<JobAcknowledge> testJobsAckConsumer() {
		return data -> {
			// Add business logic here.	
			logger.info(data.toString());
		};
	}

}
"
`;

exports[`template integration tests using the generator should package and import schemas in another avro namespace 2`] = `
"package com.example.api.jobOrder;


import com.fasterxml.jackson.annotation.JsonInclude;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class JobOrder {

	public JobOrder () {
	}

	public JobOrder (
		String jobOrderId, 
		String jobOrderDescription, 
		String jobOrderLongDescription, 
		String jobOrderNumber, 
		Boolean isActive, 
		String status, 
		Integer statuscode) {
		this.jobOrderId = jobOrderId;
		this.jobOrderDescription = jobOrderDescription;
		this.jobOrderLongDescription = jobOrderLongDescription;
		this.jobOrderNumber = jobOrderNumber;
		this.isActive = isActive;
		this.status = status;
		this.statuscode = statuscode;
	}

	private String jobOrderId;
	private String jobOrderDescription;
	private String jobOrderLongDescription;
	private String jobOrderNumber;
	private Boolean isActive;
	private String status;
	private Integer statuscode;
	public String getJobOrderId() {
		return jobOrderId;
	}

	public JobOrder setJobOrderId(String jobOrderId) {
		this.jobOrderId = jobOrderId;
		return this;
	}


	public String getJobOrderDescription() {
		return jobOrderDescription;
	}

	public JobOrder setJobOrderDescription(String jobOrderDescription) {
		this.jobOrderDescription = jobOrderDescription;
		return this;
	}


	public String getJobOrderLongDescription() {
		return jobOrderLongDescription;
	}

	public JobOrder setJobOrderLongDescription(String jobOrderLongDescription) {
		this.jobOrderLongDescription = jobOrderLongDescription;
		return this;
	}


	public String getJobOrderNumber() {
		return jobOrderNumber;
	}

	public JobOrder setJobOrderNumber(String jobOrderNumber) {
		this.jobOrderNumber = jobOrderNumber;
		return this;
	}


	public Boolean getIsActive() {
		return isActive;
	}

	public JobOrder setIsActive(Boolean isActive) {
		this.isActive = isActive;
		return this;
	}


	public String getStatus() {
		return status;
	}

	public JobOrder setStatus(String status) {
		this.status = status;
		return this;
	}


	public Integer getStatuscode() {
		return statuscode;
	}

	public JobOrder setStatuscode(Integer statuscode) {
		this.statuscode = statuscode;
		return this;
	}

	public String toString() {
		return \\"JobOrder [\\"
		+ \\" jobOrderId: \\" + jobOrderId
		+ \\" jobOrderDescription: \\" + jobOrderDescription
		+ \\" jobOrderLongDescription: \\" + jobOrderLongDescription
		+ \\" jobOrderNumber: \\" + jobOrderNumber
		+ \\" isActive: \\" + isActive
		+ \\" status: \\" + status
		+ \\" statuscode: \\" + statuscode
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should package and import schemas in another avro namespace 3`] = `
"package com.example.api.jobAck;


import com.fasterxml.jackson.annotation.JsonInclude;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class JobAcknowledge {

	public JobAcknowledge () {
	}

	public JobAcknowledge (
		String jobAckId) {
		this.jobAckId = jobAckId;
	}

	private String jobAckId;
	public String getJobAckId() {
		return jobAckId;
	}

	public JobAcknowledge setJobAckId(String jobAckId) {
		this.jobAckId = jobAckId;
		return this;
	}

	public String toString() {
		return \\"JobAcknowledge [\\"
		+ \\" jobAckId: \\" + jobAckId
		+ \\" ]\\";
	}
}
"
`;

exports[`template integration tests using the generator should place the topic variables in the correct order 1`] = `
"


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.stream.function.StreamBridge;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.MessageBuilder;

@SpringBootApplication
public class Application {

	private static final Logger logger = LoggerFactory.getLogger(Application.class);

	@Autowired
	private StreamBridge streamBridge;

	public static void main(String[] args) {
		SpringApplication.run(Application.class);
	}


	public void sendAcmeBillingReceiptsReceiptIdCreatedVersionRegionsRegionChargifyRideId(
		RideReceipt payload, String receiptId, String version, String region, String rideId
		) {
		String topic = String.format(\\"acme/billing/receipts/%s/created/%s/regions/%s/chargify/%s\\",
			receiptId, version, region, rideId);
		streamBridge.send(topic, payload);
	}
}
"
`;

exports[`template integration tests using the generator should return object when avro union type is used specifying many possible types 1`] = `
"package com.example.api.jobOrder;


import com.fasterxml.jackson.annotation.JsonInclude;



@JsonInclude(JsonInclude.Include.NON_NULL)
public class JobOrder {

	public JobOrder () {
	}

	public JobOrder (
		String jobOrderId, 
		Object jobOrderDescription, 
		Object jobOrderLongDescription) {
		this.jobOrderId = jobOrderId;
		this.jobOrderDescription = jobOrderDescription;
		this.jobOrderLongDescription = jobOrderLongDescription;
	}

	private String jobOrderId;
	private Object jobOrderDescription;
	private Object jobOrderLongDescription;
	public String getJobOrderId() {
		return jobOrderId;
	}

	public JobOrder setJobOrderId(String jobOrderId) {
		this.jobOrderId = jobOrderId;
		return this;
	}


	public Object getJobOrderDescription() {
		return jobOrderDescription;
	}

	public JobOrder setJobOrderDescription(Object jobOrderDescription) {
		this.jobOrderDescription = jobOrderDescription;
		return this;
	}


	public Object getJobOrderLongDescription() {
		return jobOrderLongDescription;
	}

	public JobOrder setJobOrderLongDescription(Object jobOrderLongDescription) {
		this.jobOrderLongDescription = jobOrderLongDescription;
		return this;
	}

	public String toString() {
		return \\"JobOrder [\\"
		+ \\" jobOrderId: \\" + jobOrderId
		+ \\" jobOrderDescription: \\" + jobOrderDescription.toString()
		+ \\" jobOrderLongDescription: \\" + jobOrderLongDescription.toString()
		+ \\" ]\\";
	}
}
"
`;
